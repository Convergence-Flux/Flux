module gui

import stdio
import stdmem

// --- Basic Types ---
type Point {
    x: int
    y: int
}

type Size {
    width: int
    height: int
}

type Rect {
    origin: Point
    size: Size
}

// --- GUI Element Base Type ---
type Element {
    id: int
    rect: Rect
    visible: bool
    draw: fn(Element)
    on_click: fn(Element, Point)
}

// --- Global GUI State ---
let elements: [Element; 64]
let element_count: int = 0

// --- API: Create Element ---
fn create_element(rect: Rect, draw_fn: fn(Element), click_fn: fn(Element, Point)) -> int {
    let id = element_count
    elements[id] = Element {
        id: id
        rect: rect
        visible: true
        draw: draw_fn
        on_click: click_fn
    }
    element_count += 1
    return id
}

// --- Draw All ---
fn draw_all() {
    for i in 0..element_count {
        if elements[i].visible {
            elements[i].draw(elements[i])
        }
    }
}

// --- Event: Click ---
fn handle_click(pos: Point) {
    for i in 0..element_count {
        let e = elements[i]
        let r = e.rect
        if e.visible and pos.x >= r.origin.x and pos.y >= r.origin.y and
           pos.x < r.origin.x + r.size.width and pos.y < r.origin.y + r.size.height {
            e.on_click(e, pos)
        }
    }
}

// --- Drawing Primitives (abstract) ---
fn draw_rect(x: int, y: int, w: int, h: int, color: int) {
    stdio.print("DrawRect at (")
    stdio.print_int(x)
    stdio.print(", ")
    stdio.print_int(y)
    stdio.print(") size ")
    stdio.print_int(w)
    stdio.print("x")
    stdio.print_int(h)
    stdio.print(" color ")
    stdio.print_int(color)
    stdio.print("\n")
}

fn draw_text(x: int, y: int, text: str) {
    stdio.print("DrawText at (")
    stdio.print_int(x)
    stdio.print(", ")
    stdio.print_int(y)
    stdio.print("): ")
    stdio.print(text)
    stdio.print("\n")
}

// --- GUI Components ---

// Label
fn draw_label(e: Element) {
    draw_text(e.rect.origin.x + 2, e.rect.origin.y + 2, "Label")
}

fn no_click(e: Element, p: Point) {}

// Button
fn draw_button(e: Element) {
    draw_rect(e.rect.origin.x, e.rect.origin.y, e.rect.size.width, e.rect.size.height, 0xAAAAAA)
    draw_text(e.rect.origin.x + 4, e.rect.origin.y + 4, "Button")
}

fn button_click(e: Element, p: Point) {
    stdio.print("Button clicked!\n")
}

// --- Public API ---

fn init_gui() {
    element_count = 0
}

fn add_label(x: int, y: int, w: int, h: int) -> int {
    let r = Rect { origin: Point{x: x, y: y}, size: Size{width: w, height: h} }
    return create_element(r, draw_label, no_click)
}

fn add_button(x: int, y: int, w: int, h: int) -> int {
    let r = Rect { origin: Point{x: x, y: y}, size: Size{width: w, height: h} }
    return create_element(r, draw_button, button_click)
}
